x
x <- 1
name <- names(x)
data4 <- lapply(1:length(data3), function(x) {
name <- names(data3)[x]
x1 <- data3[, x]
y <- data.frame(rep(name,ncol(x1)), x1)
names(y) <- c(newColName, 'Value')
})
x1 <- data3[, x]
ncol(x1)
x1
data4 <- lapply(1:length(data3), function(x) {
name <- names(data3)[x]
x1 <- data3[, x]
y <- data.frame(rep(name, length(x1)), x1)
names(y) <- c(newColName, 'Value')
})
newColName <- 'new'
data4 <- lapply(1:length(data3), function(x) {
name <- names(data3)[x]
x1 <- data3[, x]
y <- data.frame(rep(name, length(x1)), x1)
names(y) <- c(newColName, 'Value')
})
data4
data5 <- do.call('rbind', data4)
data5
name <- names(data3)[x]
name
x1 <- data3[, x]
x1
y <- data.frame(rep(name, length(x1)), x1)
y
names(y) <- c(newColName, 'Value')
y
data4 <- lapply(1:length(data3), function(x) {
name <- names(data3)[x]
x1 <- data3[, x]
y <- data.frame(rep(name, length(x1)), x1)
names(y) <- c(newColName, 'Value')
return (y)
})
data4
data5 <- do.call('rbind', data4)
data5
data3
data6 <- cbind(data2, data5)
data6
data2[, length(reserve) + 1] <- data5
data2 <- do.call('rbind', list(data1, data1, data1))
data2[, length(reserve) + 1] <- data5
data2
data1 <- data[, reserve]
data2 <- do.call('rbind', list(data1, data1, data1))
data2
data6 <- cbind(data2, data5)
data6
fortify <- function(data, reserve, newColName) {
data1 <- data[, reserve]
data2 <- do.call('rbind', list(data1, data1, data1))
data3 <- data[, !(colnames(data) %in% reserve)]
data4 <- lapply(1:length(data3), function(x) {
name <- names(data3)[x]
x1 <- data3[, x]
y <- data.frame(rep(name, length(x1)), x1)
names(y) <- c(newColName, 'Value')
return (y)
})
data5 <- do.call('rbind', data4)
data6 <- cbind(data2, data5)
return(data6)
}
data <- fortify(GDPmix, reserve, newColName = 'Mix')
data
treemap(data,
index = c('Province'),
vSize = 'GDP',
vColor = 'First',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province'),
vSize = 'GDP',
vColor = 'mix',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province'),
vSize = 'GDP',
vColor = 'Mix',
type = 'value'
#palette = 'Set1'
)
data
treemap(data,
index = c('Province'),
vSize = 'GDP',
vColor = 'Mix',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province'),
vSize = 'GDP',
vColor = 'Value',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province'),
vSize = 'GDP',
vColor = 'GDP',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province'),
vSize = 'GDP',
vColor = 'Mix',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province'),
vSize = 'GDP',
#vColor = 'Mix',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province'),
vSize = 'GDP',
vColor = 'Mix',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province'),
vSize = 'GDP',
vColor = 'GDP',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province', 'Mix'),
vSize = 'GDP',
vColor = 'GDP',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province', 'Mix'),
vSize = 'GDP',
vColor = 'GDP',
type = 'index'
#palette = 'Set1'
)
data
treemap(data,
index = c('Province', 'Mix'),
vSize = 'GDP',
vColor = 'x',
type = 'index'
#palette = 'Set1'
)
treemap(data,
index = c('Province', 'Mix'),
vSize = 'GDP',
vColor = 'x',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province', 'Mix'),
vSize = 'GDP',
vColor = 'x',
type = 'value'
#palette = 'Set1'
)
data
data[, 'Province' == "Guizhou"]
data['Province' == "Guizhou",]
data[data[,'Province'] == "Guizhou",]
treemap(data,
index = c('Province', 'Mix'),
vSize = c('GDP', 'Valu'),
vColor = 'x',
type = 'value'
#palette = 'Set1'
)
reserve
reserve <- reserve[1:3]
reserve
data <- fortify(GDPmix, reserve, 'Mix')
debug(fortify)
data <- fortify(GDPmix, reserve, 'Mix')
data1
data2
rep(data1, 4)
x <- list(foo = "", bar = 0)
x
rep(list(x), 2)
list(data1, data1, data1)
data2 <- do.call('rbind', rep(list(data1), ncol(data) - length(reserve)))
data2
reserve
data1 <- data[, reserve]
data2 <- do.call('rbind', rep(list(data1), ncol(data) - length(reserve)))
data2
fortify <- function(data, reserve, newColName) {
data1 <- data[, reserve]
data2 <- do.call('rbind', rep(list(data1), ncol(data) - length(reserve)))
data3 <- data[, !(colnames(data) %in% reserve)]
data4 <- lapply(1:length(data3), function(x) {
name <- names(data3)[x]
x1 <- data3[, x]
y <- data.frame(rep(name, length(x1)), x1)
names(y) <- c(newColName, 'Value')
return (y)
})
data5 <- do.call('rbind', data4)
data6 <- cbind(data2, data5)
return(data6)
}
fortify(GDPmix, reserve, 'Mix')
data <- fortify(GDPmix, reserve, 'Mix')
treemap(data,
index = c('Province', 'Mix'),
vSize = 'Value',
vColor = 'Value',
type = 'value'
#palette = 'Set1'
)
reserve
reserver <- c(reserve, "GDP")
reserve
reserve <- c(reserve, "GDP")
reserve
data <- fortify(GDPmix, reserve, 'Mix')
treemap(data,
index = c('Province', 'Mix'),
vSize = 'Value',
vColor = 'Value',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province'),
vSize = 'Value',
vColor = 'Value',
type = 'value'
#palette = 'Set1'
)
treemap(data,
index = c('Province'),
vSize = 'GDP',
vColor = 'GDP',
type = 'value'
#palette = 'Set1'
)
devtools::document()
devtools::document()
devtools::check(cran = T)
devtools::check(cran = T)
treemap(data,
index = c('Province'),
vSize = 'GDP',
vColor = 'GDP',
type = 'value'
#palette = 'Set1'
)
library(maps)
devtools::document()
devtools::check(cran = T)
library(maps)
map('China')
install.packages("mapdata")
map('China', 'Jiangsu')
map('China')
library(mapdata)
map('China')
map()
map('China')
map('worldHires','ch')
map('worldHires','china')
map('china')
map('china', regions = 'hebei')
map('china', regions = 'Hebei')
map('china', regions = 'Beijing')
str(map('china'))
map('china')
a <- map('china')
str(a)
a$names
str(map('world'))
a <- read.table('clipboard', header = T)
install.packages("ggplot2")
library(ggplot2)
library(plyr)
library(grid)
nlcdcolors <- structure(c("#7F7F7F", "#FFB3CC", "#00B200", "#00FFFF", "#006600", "#E5CC99", "#00B2B2", "#FFFF00", "#B2B200", "#80FFCC"), .Names = c("unknown", "cultivatedCrops", "deciduousForest", "emergentHerbaceousWetlands", "evergreenForest", "grasslandHerbaceous", "mixedForest", "pastureHay", "shrubScrub", "woodyWetlands"))
# NLCD data for the NEON plots
nlcdtable_long <- read.csv(file='https://www.dropbox.com/s/x95p4dvoegfspax/demo_nlcdneon.csv?raw=1', row.names=NULL, stringsAsFactors=FALSE)
library(ggplot2)
library(plyr)
library(grid)
# Create a blank state map. The geom_tile() is included because it allows a legend for all the pie charts to be printed, although it does not
statemap <- ggplot(nlcdtable_long, aes(decimalLongitude,decimalLatitude,fill=nlcdClass)) +
geom_tile() +
borders('state', fill='beige') + coord_map() +
scale_x_continuous(limits=c(-125,-65), expand=c(0,0), name = 'Longitude') +
scale_y_continuous(limits=c(25, 50), expand=c(0,0), name = 'Latitude') +
scale_fill_manual(values = nlcdcolors, name = 'NLCD Classification')
# Create a list of ggplot objects. Each one is the pie chart for each site with all labels removed.
pies <- dlply(nlcdtable_long, .(siteID), function(z)
ggplot(z, aes(x=factor(1), y=prop_plots, fill=nlcdClass)) +
geom_bar(stat='identity', width=1) +
coord_polar(theta='y') +
scale_fill_manual(values = nlcdcolors) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank()))
# Use the latitude and longitude maxima and minima from the map to calculate the coordinates of each site location on a scale of 0 to 1, within the map panel.
piecoords <- ddply(nlcdtable_long, .(siteID), function(x) with(x, data.frame(
siteID = siteID[1],
x = (decimalLongitude[1]+125)/60,
y = (decimalLatitude[1]-25)/25
)))
# Print the state map.
statemap
# Use a function from the grid package to move into the viewport that contains the plot panel, so that we can plot the individual pies in their correct locations on the map.
downViewport('panel.3-4-3-4')
# Here is the fun part: loop through the pies list. At each iteration, print the ggplot object at the correct location on the viewport. The y coordinate is shifted by half the height of the pie (set at 10% of the height of the map) so that the pie will be centered at the correct coordinate.
for (i in 1:length(pies)) print(pies[[i]], vp=dataViewport(xData=c(-125,-65), yData=c(25,50), clip='off',xscale = c(-125,-65), yscale=c(25,50), x=piecoords$x[i], y=piecoords$y[i]-.06, height=.12, width=.12))
nlcdcolors <- structure(c("#7F7F7F", "#FFB3CC", "#00B200", "#00FFFF", "#006600", "#E5CC99", "#00B2B2", "#FFFF00", "#B2B200", "#80FFCC"), .Names = c("unknown", "cultivatedCrops", "deciduousForest", "emergentHerbaceousWetlands", "evergreenForest", "grasslandHerbaceous", "mixedForest", "pastureHay", "shrubScrub", "woodyWetlands"))
# NLCD data for the NEON plots
nlcdtable_long <- read.csv(file='https://www.dropbox.com/s/x95p4dvoegfspax/demo_nlcdneon.csv?raw=1', row.names=NULL, stringsAsFactors=FALSE)
library(ggplot2)
library(plyr)
library(grid)
# Create a blank state map. The geom_tile() is included because it allows a legend for all the pie charts to be printed, although it does not
statemap <- ggplot(nlcdtable_long, aes(decimalLongitude,decimalLatitude,fill=nlcdClass)) +
geom_tile() +
borders('state', fill='beige') + coord_map() +
scale_x_continuous(limits=c(-125,-65), expand=c(0,0), name = 'Longitude') +
scale_y_continuous(limits=c(25, 50), expand=c(0,0), name = 'Latitude') +
scale_fill_manual(values = nlcdcolors, name = 'NLCD Classification')
# Create a list of ggplot objects. Each one is the pie chart for each site with all labels removed.
pies <- dlply(nlcdtable_long, .(siteID), function(z)
ggplot(z, aes(x=factor(1), y=prop_plots, fill=nlcdClass)) +
geom_bar(stat='identity', width=1) +
coord_polar(theta='y') +
scale_fill_manual(values = nlcdcolors) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank()))
# Use the latitude and longitude maxima and minima from the map to calculate the coordinates of each site location on a scale of 0 to 1, within the map panel.
piecoords <- ddply(nlcdtable_long, .(siteID), function(x) with(x, data.frame(
siteID = siteID[1],
x = (decimalLongitude[1]+125)/60,
y = (decimalLatitude[1]-25)/25
)))
# Print the state map.
statemap
# Use a function from the grid package to move into the viewport that contains the plot panel, so that we can plot the individual pies in their correct locations on the map.
downViewport('panel.3-4-3-4')
# Here is the fun part: loop through the pies list. At each iteration, print the ggplot object at the correct location on the viewport. The y coordinate is shifted by half the height of the pie (set at 10% of the height of the map) so that the pie will be centered at the correct coordinate.
statemap <- ggplot(nlcdtable_long, aes(decimalLongitude,decimalLatitude,fill=nlcdClass)) +
geom_tile() +
borders('state', fill='beige') + coord_map() +
scale_x_continuous(limits=c(-125,-65), expand=c(0,0), name = 'Longitude') +
scale_y_continuous(limits=c(25, 50), expand=c(0,0), name = 'Latitude') +
scale_fill_manual(values = nlcdcolors, name = 'NLCD Classification')
statemap <- ggplot(nlcdtable_long, aes(decimalLongitude,decimalLatitude,fill=nlcdClass)) +
geom_tile() +
borders('state', fill='beige') + coord_map() +
scale_x_continuous(limits=c(-125,-65), expand=c(0,0), name = 'Longitude') +
scale_y_continuous(limits=c(25, 50), expand=c(0,0), name = 'Latitude') +
scale_fill_manual(values = nlcdcolors, name = 'NLCD Classification')
pies <- dlply(nlcdtable_long, .(siteID), function(z)
ggplot(z, aes(x=factor(1), y=prop_plots, fill=nlcdClass)) +
geom_bar(stat='identity', width=1) +
coord_polar(theta='y') +
scale_fill_manual(values = nlcdcolors) +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank()))
piecoords <- ddply(nlcdtable_long, .(siteID), function(x) with(x, data.frame(
siteID = siteID[1],
x = (decimalLongitude[1]+125)/60,
y = (decimalLatitude[1]-25)/25
)))
statemap
downViewport('panel.3-4-3-4')
isntall.packages('scatterpie')
install.packages('scatterpie')
install.packages("scatterpie")
install.packages("scatterpie")
library(scatterpie)
library(scatterpie)
install.packages("scatterpie")
library(scatterpie)
library(scartterpie)
library(scatterpie)
library(ggplot2)
library(ggplot2)
install.packages("scatterpie")
library(ggplot2)
library(scatterpie)
set.seed(123)
long <- rnorm(50, sd=100)
lat <- rnorm(50, sd=50)
d <- data.frame(long=long, lat=lat)
d <- with(d, d[abs(long) < 150 & abs(lat) < 70,])
n <- nrow(d)
d$region <- factor(1:n)
d$A <- abs(rnorm(n, sd=1))
d$B <- abs(rnorm(n, sd=2))
d$C <- abs(rnorm(n, sd=3))
d$D <- abs(rnorm(n, sd=4))
d[1, 4:7] <- d[1, 4:7] * 3
head(d)
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region), data=d,
cols=LETTERS[1:4]) + coord_equal()
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region), data=d,
cols=LETTERS[1:4]) + coord_equal()
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region), data=d,
cols=LETTERS[1:4]) + coord_equal()
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region), data=d,
cols=LETTERS[1:4]) + coord_equal()
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region), data=d,
cols=LETTERS[1:4]) + coord_equal()
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region), data=d,
cols=LETTERS[1:4]) + coord_equal())
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region), data=d,
cols=LETTERS[1:4], size = A) + coord_equal()
data
d
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region), data=d,
cols=LETTERS[1:4], size = region) + coord_equal()
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region), data=d,
cols=LETTERS[1:4], size = region) + coord_equal()
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region, size = region), data=d,
cols=LETTERS[1:4]) + coord_equal()
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region, size = A), data=d,
cols=LETTERS[1:4]) + coord_equal()
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region, size = d$A), data=d,
cols=LETTERS[1:4]) + coord_equal()
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region, size = region), data=d,
cols=LETTERS[1:4]) + coord_equal()
GDPmix
devtools::check()
installed.packages('devtools')
install.packages('devtools')
devtools::check()
GDPmix
install.packages('rvest')
install.packages('gfer')
install.packages("gfer")
devtools::check()
devtools::document()
devtools::document()
devtools::document()
load("~/GitHub/gfer/.RData")
devtools::document()
devtools::document()
devtools::check(cran = T)
devtools::document()
devtools::document()
devtools::document()
devtools::check(cran = T)
install.packages('knitr')
install.packages('knitr')
devtools::check(cran = T)
devtools::document()
devtools::check(cran = T)
install.packages('rmarkdown')
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
load("~/GitHub/GDPmix.RData")
devtools::check(cran = T)
