{
    "collab_server" : "",
    "contents" : "\n#' get ticker by input a company's full name\n#'\n#' It can also be a way to test if a company is listed\n#'\n#' @param corpName Full name of a company\n#' @details\n#' Data comes from www.cninfo.com.cn/\n#' @return A data table with companies stock name and stock ticker\n#' @importFrom httr GET content\n\n\n\ngetTickers_unit <- function(corpName) {\n  url <- paste('http://www.cninfo.com.cn/cninfo-new/fulltextSearch/full?searchkey=', corpName, '&sdate=&edate=&isfulltext=false&sortName=nothing&sortType=desc&pageNum=1', sep = '')\n  a <- GET(url)\n  b <- content(a)\n\n  # check if something get back from the server\n  # and also has to check if there are at least 3 results, cus later on, it\n  # will pick up the 3rd result\n  if (length(b$announcements) == 0 | length(b$announcements) < 3) {\n\n    warning (paste(corpName, 'could be a wrong name, recheck please'))\n    res <- data.frame(secName = 'wrong_name',secCode = 'wrong_name', doubleCheck = corpName)\n  } else if (is.null(b$announcements[[3]]$secName)) {\n    warning (paste(corpName, 'could be a wrong name, recheck please'))\n    res <- data.frame(secName = 'wrong_name',secCode = 'wrong_name', doubleCheck = corpName)\n  } else {\n\n    # list number can be 1-10, but usually the 1st will be the full name,\n    # then comes the security name, so set 3, safer\n    secNameSplit <- unlist(strsplit(b$announcements[[3]]$secName, split = ','))\n\n    # if contains '\\u503a', probably a bond\n    index <- which(grepl(\"[[:digit:]]|\\u503a\", secNameSplit) == FALSE)\n\n\n    if (length(index) == 0) {\n      warning(paste(corpName, 'has no information in www.cninfo.com'))\n      res <- data.frame(secName = 'no_info',secCode = 'no_info', doubleCheck = corpName)\n    } else {\n      # check if only one index is back\n      if (length(index) != 1) warning(paste(corpName, 'has more than two tickers, please double check.'))\n\n\n      secName <- secNameSplit[index]\n\n      secCode <- unlist(strsplit(b$announcements[[3]]$secCode, split = ','))[index]\n\n      # through code to filter bonds\n      if (substr(secCode, 1, 2) == '12') warning(paste(corpName, 'could be a bond, double check'))\n      doubleCheck <- b$announcements[[3]]$announcementTitle\n\n      res <- data.frame(secName, secCode, doubleCheck)\n    }\n  }\n\n  return(res)\n}\n\n\n\n\n#' get ticker by input a company's full name or a list of companies' full name\n#'\n#' It can also be a way to test if a company is listed\n#' NOTE: If a company is listed in multiple exchange, then it needs double check,\n#' the programe only chooses ticker from random exchange\n#'\n#' @param corpNames Full name of a company, should be full name\n#' @details\n#' Data comes from www.cninfo.com.cn/\n#' @references\n#' www.cninfo.com.cn\n#' @return A data table with companies stock name and stock ticker\n#' @importFrom data.table rbindlist\n#'\n#'\n#'\n#'\n#' @export\n\n\n\ngetTickers <- function(corpNames) {\n  # here must be a column of company names\n  if (is.null(nrow(corpNames))) {\n    res <- getTickers_unit(corpNames)\n  } else if (nrow(corpNames) > 1) {\n    # since listed companies are limited, no need to use data.table\n\n    for (i in 1:nrow(corpNames)) {\n      res1 <- getTickers_unit(corpNames[i,])\n      if (i == 1) {\n        res <- res1\n      } else {\n        res <- rbindlist(list(res, res1))\n      }\n      message(i)\n    }\n  } else {\n    break(\"Please input full name(s) of a company or a column of companies, must be a column, not a row\")\n  }\n\n  return(res)\n\n}\n\n\n# ##########################\n\n\n\n\n\n\n#  following is to scrape all the company information, but since it takes too much time, temporarily suspended.\n#\n#\n# is.listed <- function(){\n#   url <- 'http://www.cninfo.com.cn/cninfo-new/information/companylist'\n#   a <- GET(url)\n#   b <- content(a, as = 'text')\n#\n#\n#   exchangeinfo <- data.table(name = c('szMain', 'szMiddleSmall', 'startUp', 'shMain', 'hkMain', 'hkStartUp'))\n#   exchangeinfo$Feature <- c('<div id=\"con-a-1\" class=\"hover\">', '<div id=\"con-a-2\" style=\"display:none\">',\n#                             '<div id=\"con-a-3\" style=\"display:none\">', '<div id=\"con-a-4\" style=\"display:none\">',\n#                             '<div id=\"con-a-5\" style=\"display:none\">', '<div id=\"con-a-6\" style=\"display:none\">')\n#\n#   exchangeinfo$start <- sapply(exchangeinfo$Feature, function(x) regexpr(x, b))\n#\n#   exchangeinfo$end <- c(exchangeinfo$start[2:nrow(exchangeinfo)], nchar(b))\n#\n#   exchangeList <- mapply(function(x, y) substr(b, x, y),exchangeinfo$start, exchangeinfo$end)\n#\n#   message('Note: since it will load the full list from internet, it will take about 20 minutes...')\n#\n#   finalList <- mapply(function(x, y) getStockFullName(x, y), exchangeList, exchangeinfo$name)\n#\n#   res <- rbindlist(finalList)\n#\n#\n#   return(res)\n#\n# }\n#\n# getStockFullName <- function(exchangeList, exch) {\n#   a <- strsplit(exchangeList, 'href=\\\"')[[1]]\n#   a <- a[2:length(a)]\n#\n#   tickers <- unlist(lapply(a, function(x) {\n#     n <- regexpr('\">', x)\n#     return(substr(x, n+2, n+7))\n#   }))\n#\n#   names <- unlist(lapply(a, function(x) {\n#     n1 <- regexpr('\">', x)\n#     n2 <- regexpr('</a>', x)\n#     return(substr(x, n1+9, n2-1))\n#   }))\n#\n#   links <- unlist(lapply(a, function(x) {\n#     n <- regexpr('\">', x)\n#     return(substr(x, 1, n-1))\n#   }))\n#\n#   # next from the links get the full name\n#   fullnames <- unlist(lapply(links, function(x) getStockFullName_unit(x)))\n#\n#   exchange <- rep(exch, length(tickers))\n#\n#\n#   res <- data.table(ticker = tickers, name = names, fullname = fullnames, exchange = exchange)\n#   print(paste(exch, 'Done!'))\n#   return(res)\n# }\n#\n#\n# getStockFullName_unit <- function(link) {\n#   url1 <- 'http://www.cninfo.com.cn/information/brief/'\n#   url2 <- unlist(strsplit(link, 'fulltext?', fixed = T))[2]\n#   url3 <- '.html'\n#   url <- paste(url1, url2, url3, sep = '')\n#\n#   fullname <- tryCatch({\n#     html_table(read_html(url))[[2]][1, 2]\n#   }, error = function(cond) {\n#     message(paste(url2, 'has connection issues'))\n#     return('error')\n#   })\n#\n#   print(fullname)\n#   return(fullname)\n# }\n",
    "created" : 1490113036485.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "340472343",
    "id" : "B7D1B720",
    "lastKnownWriteTime" : 1490113190,
    "last_content_update" : 1490113190300,
    "path" : "~/GitHub/gfer/R/getTickers.R",
    "project_path" : "R/getTickers.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}