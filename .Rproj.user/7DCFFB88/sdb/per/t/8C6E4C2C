{
    "collab_server" : "",
    "contents" : "\n#' plotScatterPie\n#'\n#' plot scatter pie chart for multidimension analysis, such as waternomics. This plot can\n#' provide information about water use/wastewater of each provinces and GDP mix of each provinces,\n#' see examples.\n#' @param data a dataframe showing different management intersections. See the data frame in the example\n#' @param t is transpose the dataframe, by default, lines flow from row to column, if t == TRUE, lines will\n#' flow from columns to rows. Once transposed,\n#' @param ifsep if separate row and col categories in the chart, default is TRUE\n#' @param trans transparency of the chart's lines, default is 0.3\n#' @param highlight a string or string array of highlighted items, MUST be selected from first column (which represents names) or colnames.\n#' if highlight has more than 2 items, they should belong to same category, either colnames, or names. One name and one column name is not allowed.\n#' @param xlim x limit of the chart, default is c(-1, 1)\n#' @param ylim y limte of the chart, default is c(-1, 1)\n#' @description if 'Summation of cell padding on y-direction are larger than the height of the cells' appears, just enlarge the xlim or ylim accordingly\n#' @import circlize\n#' @examples\n#'\n#' plotChord(cm)\n#'\n#' \\dontrun{\n#' plotChord(cm, t = T)\n#' plotChord(cm, highlight = 'MEP')\n#' plotChord(cm, highlight = 'Investment')\n#' }\n#'\nplotChord <- function(data, t = FALSE, ifsep = TRUE, trans = 0.3, highlight = NULL, xlim = c(-1, 1), ylim = c(-1, 1)) {\n\n  # tidy up data, change data frame to matrix with dimension names filled\n  m <- as.matrix(data[2:ncol(data)])\n  dimnames(m)[[1]] <- data[,1]\n\n  if (t == TRUE) m <- t(m)\n  # clean the canvass\n  circos.clear()\n\n\n  gaps <- NULL\n  # set gaps\n  if (ifsep == TRUE) {\n    # set up small gap and big gap, this is to seperate the whole circle into up and down part\n    small_gap = 1\n    big_gap = 20\n\n    # calculate how many sectors involved n_sector\n    nr = nrow(m)\n    nc = ncol(m)\n    n_sector = nr + nc\n\n    # calculate each sector takes up how many width, 0.5 means seperate into 2 parts, 0.25 means 4 parts\n    row_sector_degree = (360 - small_gap*(n_sector - 2) - big_gap*2) * 0.5 + small_gap*(nr-1)\n\n    start_degree = 0 - (180 - row_sector_degree)/2\n\n    # calculate starting degree\n    gaps = c(rep(small_gap, nrow(m) - 1), big_gap, rep(small_gap, ncol(m) - 1), big_gap)\n  }\n\n\n\n\n  col <- NULL\n  # set up color, if highlight is selected\n  if (!is.null(highlight)) {\n    col <- m\n    col[] <- 'grey'\n\n\n    if (highlight %in% dimnames(m)[[1]]) col[highlight,] <- 'red'\n    if (highlight %in% dimnames(m)[[2]]) col[,highlight] <- 'red'\n  }\n\n  # parameters\n\n  circos.par(gap.after = gaps, start.degree = start_degree, canvas.xlim = xlim, canvas.ylim = ylim,\n             points.overflow.warning = FALSE)\n\n  # plot basic plot\n  chordDiagram(m, annotationTrack = \"grid\", transparency = trans, col = col)\n\n  # change label settings\n  circos.track(track.index = 1, panel.fun = function(x, y) {\n    circos.text(CELL_META$xcenter, CELL_META$ylim[1] + 2, CELL_META$sector.index,\n                facing = \"clockwise\", niceFacing = TRUE, adj = c(0, 0.5))\n  }, bg.border = NA)\n  abline(h = 0, lty = 2, col = \"#00000080\")\n\n\n}\n\n\n\n",
    "created" : 1502336258243.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3188775161",
    "id" : "8C6E4C2C",
    "lastKnownWriteTime" : 1502336291,
    "last_content_update" : 1502336291007,
    "path" : "~/GitHub/gferplot/R/plotChord.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}