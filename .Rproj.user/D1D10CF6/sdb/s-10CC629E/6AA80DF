{
    "collab_server" : "",
    "contents" : "\n#' get PPP list from a single page\n#'\n#' @param url A url, usually it's the offical ppp website of Ministry of Finance of China\n#' @param page The page number\n#' @param proxy if you wnat to use a proxy to avoid blocking, you can input a proxy, otherwise leave\n#' it blank.\n#' @return A table of PPP projects collected from your input page\n#' @importFrom httr POST use_proxy timeout content\n#' @importFrom jsonlite fromJSON\n#' @export\n# @examples\n# add(1, 1)\n# add(10, 1)\n\n\ngetPPPList_unit <- function(url, page, proxy = NULL){\n\n  res <- POST(url,\n              encode=\"form\",\n              body=list(queryPage=page,\n                        distStr=\"\",\n                        induStr=\"\",\n                        investStr=\"\",\n                        projName=\"\",\n                        sortby=\"\",\n                        orderby=\"\",\n                        stageArr=\"\"), use_proxy(proxy[1, 1], proxy[1, 2]), timeout(15))\n  resC <- content(res, as = 'text', encoding = 'utf-8')\n  # But RJSONIO only gives list not dataframe\n  # jsonlite will have encoding problems here, need to change sys encoding\n\n  info <- fromJSON(resC, flatten = TRUE)$list\n  return(info)\n}\n\n\n\n\n#' get PPP list from an official website\n#'\n#' @param endPage On which page you want to stop scrapping\n#' @param startPage on Which page you want to start, default is 1\n#' @details\n#' Get PPP list from the Ministry of Finance of China (http://www.cpppc.org:8082/efmisweb/ppp/projectLivrary/toPPPMap.do), to view the listed projects in the PPP library.\n#' @return A table of PPP projects collected from your input page\n#' @export\n# @examples\n# add(1, 1)\n# add(10, 1)\n\ngetPPPList <- function(startPage = 1, endPage) {\n  # get proxy from special website, and every time scrapes, it will have 300 proxies, so\n  # the limit of the random number is 300. Need to check this every some time\n  page <- startPage # set up initial value\n  times <- 0\n  url <- 'http://www.cpppc.org:8082/efmisweb/ppp/projectLivrary/getPPPList.do?tokenid=null'\n\n  # first generate proxy for scapring\n  proxyPool <- getProxy()[,1:2]\n  startTime <- Sys.time() # Get the start time, if it exceeds 1 hour, load proxy again.\n\n\n\n  # Since for this case we got 301 proxies, so map the proxy table\n  proxyIndex <- 1 #proxyIndex starts from1\n  message('There might by error messages when you choose to use proxy, just ignore them.\n          When it stayed for a long time, just click \"stop\", to start another round')\n\n\n\n  repeat {\n\n    PPPList <- tryCatch({\n\n      getPPPList_unit(url = url, page, proxy = proxyPool[proxyIndex,])\n\n    },error = function(cond) {\n      message(paste('\\n', Sys.time(), \" Proxy doestn't work or ...\\n\"))\n      message(cond)\n      return(1)\n    })\n\n    if (length(PPPList) == 1 | PPPList == 1) {      times <- 0\n    proxyIndex <- proxyIndex + 1# if proxy does't work or 30 pages are scraped, change proxy\n\n    if (proxyIndex == 301) {\n      message('\\nrefreshe proxy pool...')\n      proxyPool <- getProxy()[,1:2]\n      proxyIndex <- 1\n    }\n    } else {\n\n\n      if (times == 0) {\n        totalPPPList <- PPPList\n      } else {\n        # bind the new list to the total list\n        totalPPPList <- rbind(totalPPPList, PPPList)\n      }\n\n      times <- times + 1\n      page <- page + 1\n      # here one more control, when page reaches 499, change proxy\n      # But if using proxy, usually no need to worry about the ip block\n      if (times == 1000000) {\n        # Just in case, usually it will not reach that many times\n        stop(\"1000000 times, change proxy...\\n\")\n        # randomNum <- round(runif(1, 1, 300))\n      } else {\n        message(paste(\"page\", page - 1))\n      }\n    }\n    if (page > endPage) break\n    endTime <- Sys.time()\n    if (is.integer((endTime - startTime)/5400)) {\n      message(\"\\nRefresh proxy pool...\")\n      proxyPool <- getProxy()[,1:2]\n    }\n  }\n\n  return(totalPPPList)\n}\n",
    "created" : 1481818614549.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2367317648",
    "id" : "6AA80DF",
    "lastKnownWriteTime" : 1481820497,
    "last_content_update" : 1481820497743,
    "path" : "~/GitHub/gfer/R/getPPPList.R",
    "project_path" : "R/getPPPList.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}