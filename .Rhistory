coord_equal() + ggstyle() +
scale_x_continuous(trans = trans_trans(15))
layer_plot <- layer_basic + layer_pie + layer_label  +
coord_equal() + ggstyle()
scale_x_continuous()
print(layer_plot)
i
x <- c(1.2, 1.6)
round(x)
seq(0, 1, length.out = 11)
labels <- seq(min(data$x1), max(data$x1), length.out = 5)
labels
labels <- round(seq(min(data$x1), max(data$x1), length.out = 5))
breaks <- labels * ratio
breaks
labels
layer_plot <- layer_basic + layer_pie + layer_label  +
coord_equal() + ggstyle()
scale_x_continuous(breaks = breaks, labels = labels)
layer_plot <- layer_basic + layer_pie + layer_label  +
coord_equal() + ggstyle() +
scale_x_continuous(breaks = breaks, labels = labels)
print(layer_plot)
seq(min(data$x1), max(data$x1), length.out = 5)
i
i <- round((max(data$x1) - min(data$x1))/5)
seq(1, 9, by = 2)
seq(1, by = 2, length.out = 5)
seq(1, by = 2, length.out = 6)
labels <- seq(ceiling(min(data$x1)), by = i, length.out = 5))
labels <- seq(ceiling(min(data$x1)), by = i, length.out = 5)
labels
i <- round((max(data$x1) - min(data$x1))/5)
labels <- seq(ceiling(min(data$x1)), by = i, length.out = 6)
breaks <- labels * ratio
layer_plot <- layer_basic + layer_pie + layer_label  +
coord_equal() + ggstyle() +
scale_x_continuous(breaks = breaks, labels = labels)
print(layer_plot)
ceiling(min(data$x1))
min(data$x1)
max(data$x1)
i <- ceilling((max(data$x1) - min(data$x1))/5)
i <- ceiling((max(data$x1) - min(data$x1))/5)
i
labels <- seq(ceiling(min(data$x1)), by = i, length.out = 5)
breaks <- labels * ratio
layer_plot <- layer_basic + layer_pie + layer_label  +
coord_equal() + ggstyle() +
scale_x_continuous(breaks = breaks, labels = labels)
print(layer_plot)
i <- round((max(data$x1) - min(data$x1))/5)
i <- (max(data$x1) - min(data$x1))/5
(max(data$x1) - min(data$x1))/i_adj
i_adj <- round(i)
(max(data$x1) - min(data$x1))/i_adj
n <- ifelse((max(data$x1) - min(data$x1))/i >= 5, 6, 5)
n
devtools::check(cran = T)
devtools::document()
devtools::document()
devtools::check(cran = T)
devtools::document()
devtools::document()
devtools::document()
devtools::check(cran = T)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
install.packages('googlesheets')
install.packages('gsheet')
devtools::check(cran = T)
devtools::check(cran = T)
shiny::runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
updataNBS(2014, 2015)
library(gfer)
updataNBS(2014, 2015)
devtools::check(cran = T)
updataNBS(2014, 2015)
devtools::install_github("Yuanchao-Xu/gfer")
shiny::runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/user/Google Drive/CWR/R/getPPPList')
runApp('C:/Users/user/Google Drive/CWR/R/getPPPList')
library(gfer)
updataNBS(2014, 2015)
updateNBS(2014, 2015)
updateNBS(2014, 2015)
a <- getWaternomicsData(2014, 2015)
a <- getWaternomicsData(2014, 2015)
debug(updateNBS)
debug(updateNBS)
updateNBS(2014, 2015)
updateNBS(2014, 2015)
!"NBS_data" %in% gs_ls()[, "sheet_title"]
gs_ls()[, "sheet_title"]
"NBS_data" %in% gs_ls()[, "sheet_title"]
"NBS_data" %in% gs_ls()[, "sheet_title"][1]
"NBS_data" %in% gs_ls()[, "sheet_title"][,1]
str(gs_ls()[, "sheet_title"])
gs_ls()[["sheet_title"]]
"NBS_data" %in% gs_ls()[["sheet_title"]]
devtools::check(cran = T)
updateNBS(2014, 2015)
devtools::check(cran = T)
updateNBS(2014, 2015)
res <- getWaternomicsData(2014, 2015)
devtools::check(cran = T)
res <- getWaternomicsData(2014, 2015)
debug(getWaternomicsData)
res <- getWaternomicsData(2014, 2015)
GDP
GDP
wateruse
devtools::check(cran = T)
res <- getWaternomicsData(2014, 2015)
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
res <- getWaternomicsData(2014, 2015)
debug(getWaternomicsData)
res <- getWaternomicsData(2014, 2015)
str(res)
res[, x := res[, 8]/res[, 3]]
is.data.table(res)
library(data.table)
is.data.table(res)
str(res)
devtools::check(cran = T)
res <- getWaternomicsData(2014, 2015)
str(res)
GDPColor_CWR <- c("#6B8033", "#020303", "#0D77B9")
plotScatterPie(GDPmix, pieRange = 4:6, pieColor = GDPColor_CWR)
plotScatterPie(res, pieRange = 4:6, pieColor = GDPColor_CWR)
plotScatterPie(res[1:7], pieRange = 4:6, pieColor = GDPColor_CWR)
plotScatterPie(res[1:7,], pieRange = 4:6, pieColor = GDPColor_CWR)
devtools::check(cran = T)
debug(plotScatterPie)
plotScatterPie(res[1:7,], pieRange = 4:6, pieColor = GDPColor_CWR)
i
devtools::check(cran = T)
plotScatterPie(res[1:7,], pieRange = 4:6, pieColor = GDPColor_CWR)
plotScatterPie(res[15:23,], pieRange = 4:6, pieColor = GDPColor_CWR)
devtools::check(cran = T)
plotScatterPie(res[15:23,], pieRange = 4:6, pieColor = GDPColor_CWR)
plotScatterPie(res[15:23,], pieRange = 4:6, pieColor = GDPColor_CWR)
devtools::check(cran = T)
plotScatterPie(res[15:23,], pieRange = 4:6, pieColor = GDPColor_CWR)
shiny::runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
plotScatterPie(res[15:23,], pieRange = 4:6, pieColor = GDPColor_CWR)
devtools::install_github('Yuanchao-Xu/gfer')
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
plotScatterPie(res[15:23,], pieRange = 4:6, pieColor = GDPColor_CWR)
library(gfer)
plotScatterPie(res[15:23,], pieRange = 4:6, pieColor = GDPColor_CWR)
shiny::runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
res
input$province
input$province
a
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
plot(1:5)
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/user/Google Drive/CWR/R/getPPPList')
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
res
plotYear
input$plotYear
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
devtools::check(cran = T)
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
debug(plotScatterPie)
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
data
str(data)
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
a
data()
runApp()
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
a
data()
a
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
res
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
a
res
province
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
input$plotYear
input$province
data
runApp('C:/Users/user/Google Drive/CWR/R/Provincial_waternomics')
res$Year
library(shiny); runApp('C:/Users/User/Google Drive/CWR/R/test.R')
runApp('C:/Users/User/Google Drive/CWR/R/test.R')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
library(gfer)
devtools::install_github('Yuanchao-Xu/gfer')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/New folder')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
input
input$plotYear
shinyApp(ui=ui,server=server)
library(shiny)
server <- shinyServer(function(input, output) {
etext <- eventReactive(input$evReactiveButton, {
runif(1)
})
observeEvent(input$obsEventButton,{
output$oText <- renderText({ runif(1) })
})
eventReactive(input$evReactiveButton2,{
print("Will not print")
output$oText <- renderText({ runif(1) })
})
output$eText <- renderText({
etext()
})
})
ui <- shinyUI(pageWithSidebar(
headerPanel("eventReactive and observeEvent"),
sidebarPanel(
actionButton("evReactiveButton", "eventReactive"),
br(),
actionButton("obsEventButton", "observeEvent"),
br(),
actionButton("evReactiveButton2", "eventReactive2")
),
mainPanel(
verbatimTextOutput("eText"),
verbatimTextOutput("oText")
)
))
shinyApp(ui=ui,server=server)
shinyApp(ui=ui,server=server)
shinyApp(ui, server)
observeEvent(
input$rnorm,
{
v$data<-rnorm(100)
}
)
output$plot <- renderPlot(
{
if (is.null(v$data)) return()
hist(v$data)
}
)
shinyApp(ui, server)
library(shiny)
ui<-fluidPage(
actionButton("runif", "uniform"),
actionButton("rnorm", "Normal"),
hr(),
plotOutput("plot")
)
server<-function(input, output){
v<-reactiveValues(data=NULL)
observeEvent(
input$runif,
{
v$data<-runif(100)
}
)
observeEvent(
input$rnorm,
{
v$data<-rnorm(100)
}
)
output$plot <- renderPlot(
{
if (is.null(v$data)) return()
hist(v$data)
}
)
}
shinyApp(ui, server)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sliderInput("controller", "Controller", 0, 1, 0, step = 1),
checkboxInput("inCheckbox", "Input checkbox")
)
server <- function(input, output, session) {
observe({
# TRUE if input$controller is odd, FALSE if even.
x_even <- input$controller %% 2 == 1
updateCheckboxInput(session, "inCheckbox", value = x_even)
})
}
shinyApp(ui, server)
}
shinyApp(ui, server)
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
p("The first checkbox group controls the second"),
checkboxGroupInput("inCheckboxGroup", "Input checkbox",
c("Item A", "Item B", "Item C")),
checkboxGroupInput("inCheckboxGroup2", "Input checkbox 2",
c("Item A", "Item B", "Item C"))
)
server <- function(input, output, session) {
observe({
x <- input$inCheckboxGroup
# Can use character(0) to remove all choices
if (is.null(x))
x <- character(0)
# Can also set the label and select items
updateCheckboxGroupInput(session, "inCheckboxGroup2",
label = paste("Checkboxgroup label", length(x)),
choices = x,
selected = x
)
})
}
shinyApp(ui, server)
}
runApp('C:/Users/User/Google Drive/CWR/R/New folder')
runApp('C:/Users/User/Google Drive/CWR/R/New folder')
runApp('C:/Users/User/Google Drive/CWR/R/New folder')
runApp('C:/Users/User/Google Drive/CWR/R/New folder')
runApp('C:/Users/User/Google Drive/CWR/R/New folder')
runApp('C:/Users/User/Google Drive/CWR/R/New folder')
runApp('C:/Users/User/Google Drive/CWR/R/New folder')
library(shiny)
library(stringr)
dynamic_choices = c(1:33)
dynamic_choices = str_pad(as.character(dynamic_choices), 2, side="left", pad="0")
selection = list("South"=c("02","03","05","06","09","13","16","17","18","21","28","29","32"),
"North"=c("01","04","07","08","10","11","12","19","22","23","24","25","26","27","30","31","33"),
"East"=c("14","15","20"))
ui <- shinyUI(fluidPage(
titlePanel("Update CheckboxGroupInput"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("county", "County", c("South", "North", "East")),
checkboxGroupInput("dynamic", "Dynamic", dynamic_choices)
),
mainPanel(
)
)
))
server <- shinyServer(function(session, input, output) {
observeEvent(input$county, {
selected = c()
for (s in input$county) {
selected = c(selected, selection[[s]])
}
# This is needed due to a bug in Shiny, see https://github.com/rstudio/shiny/issues/831
if (is.null(selected)) {
selected = character(0)
}
updateCheckboxGroupInput(session, "dynamic", selected = selected)
}, ignoreNULL = FALSE)
})
shinyApp(ui = ui, server = server)
runApp('C:/Users/User/Google Drive/CWR/R/New folder')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
res <- data(GDPmix)
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
str(res)
res$data
dataset$data
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
res$data
Q
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
data()
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
input$Year
input$province
dataset()
res()
data()
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
data()
res1
res1()
res()
dataset()
dataset()
res1
res()
res1()
res1()
res()
res()
res()
res
res()
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
plotData()
input$plotYear
next()
dataset()
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
dataset()
res
res
input$province
input$province
input$province
plotData()
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
debug(plotScatterPie)
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
data
pieRange
data
runApp('C:/Users/User/Google Drive/CWR/R/test.R')
source('C:/Users/User/Google Drive/CWR/R/test.R')
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
data
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
res
colnames(res)
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
data
runApp('C:/Users/User/Google Drive/CWR/R/Provincial_waternomics')
res
res$label == input$province
res$label
dataset()
dataset()$label
getWaternomicsData(2014, 2015)
debug(getNBS)
getNBS('GDP', 2014, 2015)
n1
GDP_total
rownames(a)
GDP_total$Province
strsplit(GDP_total$Province[1],'.')
?strsplit
x = c("abcde", "ghij", "klmnopq")
x
strsplit(x, "", fixed=TRUE)
base::strsplit(GDP_total$Province[1],'.')
strsplit(GDP_total$Province[1],'.')
GDP_total$Province[1]
strsplit(GDP_total$Province[1], '.')
strsplit(GDP_total$Province[1], 'B')
strsplit(GDP_total$Province[1], '\.')
strsplit(GDP_total$Province[1], '/.')
strsplit(GDP_total$Province[1], '1.')
strsplit(GDP_total$Province[1], '1.')[[2]]
strsplit(GDP_total$Province[1], '1.')[[1]][2]
strsplit(GDP_total$Province[1], '\\.')[[2]]
strsplit(GDP_total$Province[1], '\\.')
strsplit(GDP_total$Province[1], '\\.')[[1]][2]
strsplit(GDP_total$Province, '\\.')[[1]][2]
sapply(GDP_total$Province, function (x) strsplit(x, '\\.')[[1]][2])
a <- sapply(GDP_total$Province, function (x) strsplit(x, '\\.')[[1]][2])a
a <- sapply(GDP_total$Province, function (x) strsplit(x, '\\.')[[1]][2])
str(a)
names(a)
names(a) <- NULL
devtools::check(cran = T)
devtools::check(cran = T)
