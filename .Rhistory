#'  statscnRegions('csnd')
#'  statscnRegions('gjnd')
statscnRegions<-function(dbcode='fsnd')
{
curQuery<-list(
m="getOtherWds",
dbcode=dbcode,
rowcode="zb",
colcode="sj",
wds="[]",
#dfwds="[]",
k1=milSec()
)
yy<-GET(statscnbase, query=curQuery)
assign('lastQuery',curQuery, envir=rstatscnEnv)
checkHttpStatus(yy)
ret=fromJSON(content(yy,"text",encoding="utf-8"))
regIndex <- which(ret[[2]]$wdcode == 'reg')
df <- ret[[2]][,'nodes'][[regIndex]]
df$sort=NULL
colnames(df) <- c("regCode","name")
return(df)
}
#' query data in the statscn db
#'
#' the main function for querying the statscn database, it will retrieve the data from specified db and orginize the data in a data frame.
#' @param zb the zb/category code to be queried
#' @param dbcode the db code for querying
#' @param rowcode rowcode in the returned data frame
#' @param colcode colcode in the returned data frame
#' @param moreWd more constraint on the data
#'        where the name should be one of c("reg","sj") , which stand for region and sj/time.
#'        the valuecode for reg should be the region code queried by statscnRegions()
#'        the valuecode for sj should be like '2014' for *nd , '2014C' for *jd , '201405' for *yd.
#'        Be noted that , the moreWd name should be different with either rowcode or colcode
#' @return the data frame you are quering
#' @export
#' @examples
#' df=statscnQueryData('A0201',dbcode='hgnd')
#' df=statscnQueryData('A0201',dbcode='fsnd',rowcode='zb',colcode='sj',
#'                     moreWd=list(name='reg',value='110000'))
statscnQueryData<-function(zb="A0201",dbcode="hgnd",rowcode='zb',colcode='sj',moreWd=list(name=NA,value=NA))
{
curQuery<-list(
m="QueryData",
dbcode=dbcode,
rowcode=rowcode,
colcode=colcode,
wds=genDfwds(moreWd$name,moreWd$value),
dfwds=genDfwds("zb",zb),
k1=milSec()
)
yy<-GET(statscnbase, query=curQuery)
assign('lastQuery',curQuery, envir=rstatscnEnv)
checkHttpStatus(yy)
ret=fromJSON(content(yy,"text",encoding="utf-8"))
return(dataJson2df(ret,curQuery$rowcode,curQuery$colcode))
}
#' fetch the lastN data
#'
#' fetch the lastN data for the latest query, only affect the number of rows in the returned data.
#' This function can not be used alone , statscnQueryData() has to be called before this function
#' @param n the number of rows to be fetched
#' @return the last n rows data in the latest query
#' @export
#' @examples
#' df=statscnQueryData('A0201',dbcode='hgnd')
#' df2=statscnQueryLastN(20)
statscnQueryLastN<-function(n)
{
wdcode="sj"
valuecode=paste("LAST",n,sep="")
if( is.null(get('lastQuery', envir=rstatscnEnv)) ){
stop("please call a statscnQueryData for some data firstly")
}
curQuery=get('lastQuery', envir=rstatscnEnv)
if( curQuery$m=="QueryData" ) {
curQuery$dfwds=genDfwds(wdcode,valuecode)
}
yy<-GET(statscnbase, query=curQuery)
assign('lastQuery',curQuery, envir=rstatscnEnv)
checkHttpStatus(yy)
ret=fromJSON(content(yy,"text",encoding="utf-8"))
return(dataJson2df(ret,curQuery$rowcode,curQuery$colcode))
}
#' statscnRowNamePrefix
#'
#' set the rowName prefix in the dataframe
#'
#' in case you encounter the following error:
#'   Error in `row.names<-.data.frame`(`*tmp*`, value = value) :
#'   duplicate 'row.names' are not allowed
#' you need to call this function
#'
#' @param p , how to set the rowname prefix.
#'     it is 'nrow' by default , and it is the only supported value currently
#'     to unset the row name prefix, call this function with p=NULL
#' @return no return
#' @export
statscnRowNamePrefix<-function(p="nrow")
{
if (p != "nrow" && ! is.null(p)) {
stop(sprintf("the only supported prefix is 'nrow' or NULL "))
}
assign('prefix',p, envir=rstatscnEnv)
}
statscnDbs()
statscnQueryZb(dbcode='hgnd')
statscnQueryZb('A01',dbcode='hgnd')
?http_status
??http_status
devtools::check()
?devtools::check()
?devtools::check(asCran = T)
?devtools::check(as.cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
library(gfer)
df <- statscnQueryData('A0201', dbcode = 'hgnd')
df <- statscnQueryData('A0201',dbcode = 'fsnd', rowcode = 'zb', colcode = 'sj',
moreWd = list(name = 'reg', value = '110000'))
debug(statscnQueryData)
df <- statscnQueryData('A0201',dbcode = 'fsnd', rowcode = 'zb', colcode = 'sj',
moreWd = list(name = 'reg', value = '110000'))
df <- statscnQueryData('A0201',dbcode = 'fsnd', rowcode = 'zb', colcode = 'sj',
n
undebug(statscnQueryData)
debug(dataJson2df)
?dataJson2df
debug(gfer::dataJson2df)
debug(statscnQueryData)
df <- statscnQueryData('A0201',dbcode = 'fsnd', rowcode = 'zb', colcode = 'sj',
moreWd = list(name = 'reg', value = '110000'))
debug(dataJson2df)
rowCodes
rownames(myret)
myret
myret
rowNames
rownames(myret)
df <- statscnQueryData('A0201',dbcode = 'fsnd', rowcode = 'zb', colcode = 'sj',
moreWd = list(name = 'reg', value = '110000'))
rownames(myret)
rownames(myret) <- rowNames
rowNames
rownames(myret)
df <- statscnQueryData('A0201',dbcode = 'fsnd', rowcode = 'zb', colcode = 'sj',
moreWd = list(name = 'reg', value = '110000'))
curQuery
ret
content(yy, "text", encoding = "utf-8")
fromJSON(content(yy, "text", encoding = "utf-8"))
statscnQueryZb('A01',dbcode='fsnd')
statscnQueryZb('A0102',dbcode='fsnd')
statscnQueryZb('A02',dbcode='fsnd')
statscnQueryZb('A0201',dbcode='fsnd')
devtools::check(cran = T)
devtools::check(cran = T)
devtools::check(cran = T)
reference(rstatscn)
cite(rstatscn)
citation
citation()
citation("rstatscn")
devtools::document()
devtools::check(cran = T)
devtools::build()
devtools::
devtools::check(cran = T)
statscnQueryZb('A02', dbcode = 'fsnd')
statscnQueryZb('A0201', dbcode = 'fsnd')
statscnQueryZb('A02', dbcode = 'fsnd')
statscnQueryData('A0201', dbcode = 'fsnd')
a <- statscnQueryData('A0201', dbcode = 'fsnd')
str(a)
a <- statscnQueryData('A0201', dbcode = 'fsnd', rowcode = 'reg')
a
statscnQueryData('A0201', dbcode = 'fsnd')
statscnQueryData('A0201')
devtools::check(cran = T)
devtools::build()
devtools::check(cran = T)
devtools::build()
devtools::document()
devtools::check(cran = T)
devtools::build()
devtools::document()
getPPPList(1,3)
devtools::check(cran = T)
getPPPList(1,3)
?rbindlist
DT1 = data.table(A=1:3,B=letters[1:3])
DT2 = data.table(A=4:5,B=letters[4:5])
l = list(DT1,DT2)
DT1 = data.table(A=1:3,B=letters[1:3])
DT2 = data.table(A=4:5,B=letters[4:5])
l = list(DT1,DT2)
DT1 = data.table(A=1:3,B=letters[1:3])
library(data.table)
DT1 = data.table(A=1:3,B=letters[1:3])
DT2 = data.table(A=4:5,B=letters[4:5])
rbindlist(DT1, DT2)
DT1
DT2
l = list(DT1,DT2)
l = list(DT1,DT2)
devtools::check(cran = T)
getPPPList(1,3)
getTickers('中国神华股份有限公司')
library(gfer)
library(gfer)
getTickers('中国神华股份有限公司')
indexData <- getIndexData()
getIndex('600601', indexData)
getIndex('60060', indexData)
getIndex('600100', indexData)
GDP <- statscnQueryData('A0201', dbcode = 'fsnd')
library(gfer)
library(gfer)
library(gfer)
GDP <- statscnQueryData('A0201', dbcode = 'fsnd')
devtools::check(cran = T)
GDP <- statscnQueryData('A0201', dbcode = 'fsnd')
GDP
GDP <- statscnQueryData('A0201',dbcode='fsnd',rowcode='reg',colcode='zb',moreWd=list((name='sj'),value='2015'))
GDP
GDP_total <- lapply(2013:2015, function(x) statscnQueryData('A0201',dbcode='fsnd',rowcode='reg',colcode='zb',moreWd=list((name='sj'),value=x)))
str(GDP_total)
GDP_total <- lapply(2013:2015, function(x) {
a <- statscnQueryData('A0201',dbcode='fsnd',rowcode='reg',colcode='zb',moreWd=list((name='sj'),value=x))
a$Year <- x
return(a)
})
str(GDP_total)
str(GDP_total[[1]])
GDP_total[[1]]
GDP <- lapply(2013:2015, function(x) {
a <- statscnQueryData('A0201',dbcode='fsnd',rowcode='reg',colcode='zb',moreWd=list((name='sj'),value=x))
a$Year <- x
return(a)
})
GDP_total <- rbindlist(GDP)
library(data.table)
GDP_total <- rbindlist(GDP)
str(GDP_total)
GDP_total
?rbind
dataForCWR <- function(indicator, start, end) {
switch(indicator,
'GDP' = 'A0201')
GDP <- lapply(start:end, function(x) {
a <- statscnQueryData('A0201',dbcode='fsnd',rowcode='reg',colcode='zb',moreWd=list((name='sj'),value=x))
a$Year <- x
return(a)
})
GDP_total <- rbindlist(GDP)
return(GDP_total)
}
getBasicData_CWR <- function(indicator, start, end) {
switch(indicator,
'GDP' = 'A0201')
GDP <- lapply(start:end, function(x) {
a <- statscnQueryData('A0201',dbcode='fsnd',rowcode='reg',colcode='zb',moreWd=list((name='sj'),value=x))
a$Year <- x
return(a)
})
GDP_total <- rbindlist(GDP)
return(GDP_total)
}
GDP_total <- getBasicData_CWR('GDP', 2013, 2015)
GDP_total
str(GDP_total)
statscnQueryZb(dbcode='fsnd')
statscnQueryZb('A0C',dbcode='hgnd')
GDP_total <- getBasicData_CWR('wastewater', 2013, 2015)
GDP_total
str(GDP_total)
getBasicData_CWR <- function(indicator, start, end) {
switch(indicator,
'GDP' = 'A0201',
'water resources' = 'A0C02',
'water use' = 'A0C03',
'wastewater' = 'A0C04')
GDP <- lapply(start:end, function(x) {
a <- statscnQueryData(indicator, dbcode='fsnd', rowcode='reg', colcode='zb', moreWd=list((name='sj'), value=x))
a$Year <- x
return(a)
})
GDP_total <- rbindlist(GDP)
return(GDP_total)
}
GDP_total <- getBasicData_CWR('wastewater', 2013, 2015)
debug(GDP_total)
debug(GgetBasicData_CWR)
debug(getBasicData_CWR)
GDP_total <- getBasicData_CWR('wastewater', 2013, 2015)
indicator
getBasicData_CWR <- function(indicator, start, end) {
index <- switch(indicator,
'GDP' = 'A0201',
'water resources' = 'A0C02',
'water use' = 'A0C03',
'wastewater' = 'A0C04')
GDP <- lapply(start:end, function(x) {
a <- statscnQueryData(index, dbcode='fsnd', rowcode='reg', colcode='zb', moreWd=list((name='sj'), value=x))
a$Year <- x
return(a)
})
GDP_total <- rbindlist(GDP)
return(GDP_total)
}
GDP_total <- getBasicData_CWR('wastewater', 2013, 2015)
str(GDP_total)
statscnQueryZb('A0C',dbcode='hgnd')
statscnQueryZb('A0C',dbcode='fsnd')
getBasicData_CWR <- function(indicator, start, end) {
index <- switch(indicator,
'GDP' = 'A0201',
'water resources' = 'A0C03',
'water use' = 'A0C04',
'wastewater' = 'A0C05')
GDP <- lapply(start:end, function(x) {
a <- statscnQueryData(index, dbcode='fsnd', rowcode='reg', colcode='zb', moreWd=list((name='sj'), value=x))
a$Year <- x
return(a)
})
GDP_total <- rbindlist(GDP)
return(GDP_total)
}
GDP_total <- getBasicData_CWR('wastewater', 2013, 2015)
str(GDP_total)
rm(list())
rm()
rm(list = ls())
devtools::document()
devtools::check(cran = T)
devtools::document()
index <- 'A0201'
start <- 2014
end <- 2015
a <- statscnQueryData(index, dbcode='fsnd', rowcode='reg', colcode='zb', moreWd=list((name='sj'), value=x))
library(gfer)
a <- statscnQueryData(index, dbcode='fsnd', rowcode='reg', colcode='zb', moreWd=list((name='sj'), value=x))
devtools::check()
a <- statscnQueryData(index, dbcode='fsnd', rowcode='reg', colcode='zb', moreWd=list((name='sj'), value=x))
GDP <- lapply(start:end, function(x) {
a <- statscnQueryData(index, dbcode='fsnd', rowcode='reg', colcode='zb', moreWd=list((name='sj'), value=x))
a$Year <- x
return(a)
})
GDP
rownames(GDP)
GDP[,1]
str(GDP)
GDP_total <- rbindlist(GDP)
library(data.table)
a <- getBasicData_CWR('GDP', 2014, 2015)
a
GDP <- lapply(start:end, function(x) {
a <- statscnQueryData(index, dbcode='fsnd', rowcode='reg', colcode='zb', moreWd=list((name='sj'), value=x))
a$Year <- x
return(a)
})
library(data.table)
GDP_total <- rbindlist(GDP)
GDP
GDP[[1]]
GDP[[1]][,1]
rownames(GDP[[1]])
GDP <- lapply(start:end, function(x) {
a <- statscnQueryData(index, dbcode='fsnd', rowcode='reg', colcode='zb', moreWd=list((name='sj'), value=x))
a$Year <- x
a$Province <- rownames(a)
return(a)
})
GDP
str(GDP)
GDP_total <- rbindlist(GDP)
GDP_total
devtools::check()
library(data.table)
getBasicData_CWR <- function(indicator, start, end) {
index <- switch(indicator,
'GDP' = 'A0201',
'water resources' = 'A0C03',
'water use' = 'A0C04',
'wastewater' = 'A0C05')
GDP <- lapply(start:end, function(x) {
a <- statscnQueryData(index, dbcode='fsnd', rowcode='reg', colcode='zb', moreWd=list((name='sj'), value=x))
a$Year <- x
a$Province <- rownames(a)
return(a)
})
GDP_total <- rbindlist(GDP)
# re-order columns
n1 <- ncol(GDP_total)
newOrder <- c(n1, n1-1, 1:n1-2)
return(GDP_total)
}
indicator <- "GDP"
start <- 2014
end <- 2015
GDP <- lapply(start:end, function(x) {
a <- statscnQueryData(index, dbcode='fsnd', rowcode='reg', colcode='zb', moreWd=list((name='sj'), value=x))
a$Year <- x
a$Province <- rownames(a)
return(a)
})
index <- 'A0201'
GDP <- lapply(start:end, function(x) {
a <- statscnQueryData(index, dbcode='fsnd', rowcode='reg', colcode='zb', moreWd=list((name='sj'), value=x))
a$Year <- x
a$Province <- rownames(a)
return(a)
})
GDP_total <- rbindlist(GDP)
GDP_total
n1 <- ncol(GDP_total)
n1
newOrder <- c(n1, n1-1, 1:n1-2)
newOrder
newOrder <- c(n1, n1-1, 1:(n1-2))
newOrder
GDP_total <- GDP_total[,newOrder]
GDP_total <- GDP_total[newOrder]
GDP_total
GDP_total <- GDP_total[newOrder]
GDP_total
newOrder
GDP_total[newOrder]
GDP_total[18]
GDP_total[1]
GDP_total[20]
str(GDP_total)
setcolorder(GDP_total, newOrder)
GDP_total
devtools::document()
devtools::check(cran = T)
devtools::check()
debug(getBasicData_CWR)
a <- getBasicData_CWR('GDP', 2014, 2015)
debug(statscnQueryData)
value
moreWd
ret
ret[,1]
str(ret)
a <- dataJson2df(ret,curQuery$rowcode,curQuery$colcode)
a[,1:2]
a <- getBasicData_CWR('GDP', 2014, 2015)
curQuery
statscnQueryData('A010101',dbcode='fsnd',rowcode='reg',colcode='zb',moreWd=list((name='sj'),value='2015'))
a <- statscnQueryData('A010101',dbcode='fsnd',rowcode='reg',colcode='zb',moreWd=list((name='sj'),value='2015'))
a
a <- statscnQueryData('A010101',dbcode='fsnd',rowcode='reg',colcode='zb',moreWd=list((name='sj'),value=2014))
curQuery
C
C
C
a
a <- statscnQueryData('A010101',dbcode='fsnd',rowcode='reg',colcode='zb',moreWd=list((name='sj'),value=2013))
a
a <- statscnQueryData('A010101',dbcode='fsnd',rowcode='reg',colcode='zb',moreWd=list((name='sj'),value='2013'))
a
Q
devtools::check()
debug(getBasicData_CWR)
a <- getBasicData_CWR('GDP', 2014, 2015)
debug(statscnQueryData)
curQeury
curQuery
devtools::check()
a <- getBasicData_CWR('GDP', 2014, 2015)
a[,2]
a[,1:3]
debug(getBasicData_CWR)
a <- getBasicData_CWR('GDP', 2014, 2015)
debug(statscnQueryData)
curQuery
a <- getBasicData_CWR('GDP', 2014, 2015)
a <- dataJson2df(ret,curQuery$rowcode,curQuery$colcode)
a
a[,1:3]
curQuery$rowcode
curQuery$colcode
curQuery
a <- getBasicData_CWR('GDP', 2014, 2015)
moreWd
moreWd$name
list((name='sj'), value=x)
list((name='sj'), value=2015)
list(name='sj', value=2015)
devtools::check()
a <- getBasicData_CWR('GDP', 2014, 2015)
a[,1:3]
a <- getBasicData_CWR('wastewater', 2007, 2008)
a[,1:3]
a <- getBasicData_CWR('water use', 2007, 2008)
a
debug(getBasicData_CWR)
a <- getBasicData_CWR('water use', 2007, 2008)
indicator
index
debug(statscnQueryData)
zb
curQuery
a <- dataJson2df(ret,curQuery$rowcode,curQuery$colcode)
a[,1:3]
curQuery
devtools::check()
a <- getBasicData_CWR('water use', 2007, 2008)
a[,1:3]
