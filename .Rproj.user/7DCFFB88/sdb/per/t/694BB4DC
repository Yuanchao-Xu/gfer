{
    "collab_server" : "",
    "contents" : "\n\n# this is for setting plot radius\ngetRadius <- function(y, small = 5, medium = 10, large = 15) {\n  r <- sapply(y, function(x) {\n    if (x <= 40000 & x >= 15000) {\n      x <- medium\n    } else if (x < 15000) {\n      x <- small\n    } else {\n      x <- large\n    }\n  })\n  return (r)\n}\n\n\n#' plotScatterPie\n#'\n#' plot scatter pie chart for multidimension analysis, such as waternomics. This plot can\n#' provide information about water use/wastewater of each provinces and GDP mix of each provinces,\n#' see examples.\n#' @param data a dataframe with information like x, y, r, label. See examples about how to assign these columns as required.\n#' @param pieRange define which column to which column to be presented by pie chart, see examples\n#' @param pieColor color for different colors in pie chart\n#' @param labelLine how far is label to pie chart, can be left with default value.\n#' @param xmeanLine if plot x mean line\n#' @param ymeanLine if plot y mean line\n#' @importFrom graphics plot abline text\n#' @importFrom ggrepel geom_text_repel\n#' @importFrom scatterpie geom_scatterpie\n#' @export\n#' @import ggplot2\n#' @examples\n#'\n#'\n#' GDPColor_CWR <- c(\"#6B8033\", \"#020303\", \"#0D77B9\")\n#'\n#' # Change colnames so that the function can recognize x, y, r, label\n#'\n#' colnames(GDPmix) <- c('label', 'r', '1st', '2nd', '3rd', 'x', 'y')\n#'\n#' \\dontrun{\n#' plotScatterPie(GDPmix, pieRange = 3:5, pieColor = GDPColor_CWR)\n#' }\n#'\n#'\n\nplotScatterPie <- function(data, pieRange, pieColor = NULL, xmeanLine = TRUE, ymeanLine = TRUE, labelLine = NULL) {\n\n  ## input check\n  if(is.null(pieRange)) stop(\"You have to assign which column to which column to be presented by pie chart.\")\n  if(length(pieRange)!=length(pieColor)) stop(\"Length of pieRange and pieColor should be the same.\")\n\n  # adjustment of x and y\n  # since coord_equal is set in order to make the pie chart round, and\n  # most of time y axis is tens times of x axis, the plot will be weird.\n  # So x and y axis must be adjusted to roughly 4:3, and add the label manually afterwards\n  xlim <- getLim(data$x)\n  ylim <- getLim(data$y)\n\n  ratio <- (ylim[2] - ylim[1])/(xlim[2] - xlim[1])/0.75\n  data$x1 <- data$x\n  data$x <- data$x1 * ratio\n\n  i <- round((max(data$x1) - min(data$x1))/5)\n  n <- ifelse((max(data$x1) - min(data$x1))/i >= 5, (5 + ceiling((max(data$x1) - min(data$x1))/i - 5)), 5)\n\n  labels <- seq(ceiling(min(data$x1)), by = i, length.out = n)\n  breaks <- labels * ratio\n\n  with (data, {\n    layer_basic <- ggplot(data, aes(x = x))\n #     geom_point(data = data, aes(x, y))\n\n    data$radius <- getRadius(data$r)\n\n\n    layer_pie <- geom_scatterpie(data = data, aes(x, y, r = radius),\n                                 cols = colnames(data)[pieRange], color = 'white')\n\n    if (is.null(labelLine)) labelLine <- max(data$radius)/3\n\n    layer_label <- geom_text_repel(data = data, aes(x, y, label = label),\n                                   point.padding = unit(labelLine, \"lines\"))\n    #layer_legend <- geom_scatterpie_legend(data$radius, x= 0, y=0)\n    if (xmeanLine == TRUE) layer_basic <- layer_basic + geom_vline(xintercept = mean(data$x), color = 'red', size = 1.5, linetype = 2)\n    if (ymeanLine == TRUE) layer_basic <- layer_basic + geom_hline(yintercept = mean(data$y), color = 'red', size = 1.5, linetype = 2)\n\n    if (!is.null(pieColor)) layer_basic <- layer_basic + scale_fill_manual(values = pieColor)\n\n    layer_plot <- layer_basic + layer_pie + layer_label  +\n      coord_equal() + ggstyle() +\n      scale_x_continuous(breaks = breaks, labels = labels)\n\n\n    print(layer_plot)\n\n  })\n}\n\n# this is usefull but not appropriate for the scatter pie\n# Maybe because pie needs a coord_equal definitely, and also, scatterpie is dealt with\n# in another environment, so the transformation cannot be spread.\n# @importFrom scales trans_new\n# defnie a new transformation\n# trans_trans <- function(ratio) {\n#   trans_new('trans',\n#             transform = function(x) {\n#               y <- x * ratio\n#               return(y)\n#             },\n#             inverse = function(y) {\n#               x <- y / ratio\n#               return(x)\n#             })\n# }\n\n\n\n\n\n#' @import ggplot2\nggstyle <- function() {\n  a <- theme_set(theme_bw()) +\n    theme(legend.position = 'bottom')\n  #   theme(axis.line = element_line(size = 1, colour = \"black\"))\n             #panel.background = element_rect(fill = \"white\"),\n             #panel.grid.major = element_line(colour = \"grey50\"))\n  return(a)\n}\n\nadjustxlim <- function(xlim, ylim, ratio = 0.75) {\n  length_y <- max(ylim) - min(ylim)\n  length_x <- max(xlim) - min(xlim)\n  if (length_x < length_y/ratio) xlim <- c(min(xlim), min(xlim) + length_y)\n  return(xlim)\n}\n\ngetLim <- function(x) {\n  # decide axis interval\n  dig <- nchar(min(round(x)))\n\n  x1 <- round(min(x) - (max(x) - min(x))/length(x), -(dig - 1))\n  x2 <- round(max(x) + (max(x) - min(x))/length(x), -(dig - 1))\n\n  return(c(x1, x2))\n}\n\n\n\n########################################################################################\n#######################################################################################\n#'\n#'\n#'\n#' #' plotWaternomics\n#' #'\n#' #' plot special waternomics chart for CWR\n#' #'\n#' #'\n#' #' @param data a dataframe containing columns of GDP, Value-added of fisrt/second/third industry, x and y\n#' #' x and y are the coordinates of the plot, and it varies depending on needs, can be per capita\n#' #' water use vs. per capita wastewater, etc. See example of year 2015 by \\code{GDPmix}\n#' #'\n#' #' Columns should be exactly the same as GDPmix, which means, first column is province, seconnd is x,\n#' #' third is y, fourth is Frist, etc. Load GDPmix to have a look at the columns.\n#' #' @param title chart title\n#' #' @param xname x axis name\n#' #' @param yname y axis name\n#' #' @param small radius of small circle, default is 1.5\n#' #' @param medium radius of medium circle, default is 3\n#' #' @param large radius of large circle, default is 5\n#' #' @param legend whether to show legend, default is TRUE\n#' #' @param label whether to show label, default is TRUE\n#' #' @param xmean a line showing mean value of x\n#' #' @param ymean a line showing mean value of y\n#' #' @param line whether to show ablines, default is TRUE\n#' #' @importFrom mapplots add.pie\n#' #' @importFrom graphics plot plot.new\n#' #' @importFrom grDevices rgb\n#' #' @importFrom plotrix thigmophobe.labels\n#' #' @export\n#' #' @examples\n#' #' \\dontrun{\n#' #' data(GDPmix)\n#' #' plotwaternomics(GDPmix)\n#' #' }\n#'\n#'\n#'\n#' plotWaternomics <- function(data, title = '', xname = '', yname = '', small = 1.5, medium = 3, large = 5,\n#'                             legend = TRUE, label = TRUE, xmean = NULL, ymean = NULL, line = TRUE) {\n#'   # plot basic plot based on x and y\n#'   #plot.new()\n#'\n#'   # for some buffer space, extend the x and y axis, redefine them first\n#'   xlim <- getLim(data$x)\n#'\n#'   ylim <- getLim(data$y)\n#'\n#'\n#'   plot(data$x, data$y, main = title, xlab = xname, ylab = yname,\n#'        xlim = xlim, ylim = ylim,\n#'        bty = 'n')\n#'\n#'\n#'\n#'   provinceNum <- nrow(data)\n#'\n#'   # decide radius of the pie charts\n#'   r <- getRadius(data$GDP, small, medium, large)\n#'\n#'   # define CWR color\n#'   col <- c(rgb(107/255, 128/255, 51/255), rgb(2/255, 3/255, 3/255), rgb(13/255, 119/255, 185/255))\n#'\n#'\n#'\n#'\n#'   # add pie charts\n#'   for (i in 1:provinceNum) {\n#'\n#'     add.pie(x = data$x[i], y = data$y[i], z = c(data$First[i], data$Second[i], data$Third[i]),\n#'             labels = '', radius = r[i], col = col, border = \"white\")\n#'     #thigmophobe.labels(data$x[i], data$y[i], data$Province[i], offset = r[i]/3)\n#'\n#'   }\n#'   if (legend == TRUE) {\n#'     legend('topright', c(\"Agriculture\",\"Industry\",\"Services\"), cex = 0.8,\n#'            fill = col)\n#'   }\n#'   if (label == TRUE) {\n#'     thigmophobe.labels(data$x, data$y, data$Province, offset = 1)\n#'   }\n#'\n#'\n#'   if (line == TRUE) {\n#'     # add ablines of national mean or mean\n#'     if (is.null(xmean)) xmean <- round(mean(data$x), 2)\n#'     if (is.null(ymean)) ymean <- round(mean(data$y), 2)\n#'     abline(h = ymean, v = xmean, col = '#c00000', lwd = 3, lty = 2)\n#'   }\n#'\n#'   #spread.labels(data$x, data$y, data$Province, offsets = 0.01)\n#'\n#' }\n#'\n#'\n#'\n#' #' plotWaternomics_legend\n#' #'\n#' #' legend for plot special waternomics chart for CWR\n#' #'\n#' #' @param label whether to show label, default is TRUE\n#' #' @importFrom mapplots add.pie\n#' #' @importFrom graphics plot abline text\n#' #' @importFrom grDevices rgb\n#' #' @export\n#' #' @examples\n#' #' \\dontrun{\n#' #' plotwaternomics_legend()\n#' #' }\n#' plotWaternomics_legend <- function(label = TRUE) {\n#'   r <- c(5, 3, 1.5)\n#'   x <- c(0, 0, 0)\n#'   y <- c(7, 16, 21)\n#'   plot (x, y, xlim = c(-3, 3), ylim = c(0, 23), xaxt = 'n', yaxt = 'n', bty = 'n')\n#'\n#'   col <- c(rgb(107/255, 128/255, 51/255), rgb(2/255, 3/255, 3/255), rgb(13/255, 119/255, 185/255))\n#'\n#'   for (i in 1:3) {\n#'     add.pie(x = x[i], y = y[i], z = c(1, 1, 1), radius = r[i], labels = '', col = col, border = 'white')\n#'   }\n#'   if (label == TRUE) {\n#'     size <- 1.2\n#'     text(-0.7, 8.5, \"Service\", col = 'white', cex = size)\n#'     text(0.7, 8.5, \"Agriculture\", col = 'white', cex = size)\n#'     text(0, 4, \"Industry\", col = 'white', cex = size)\n#'   }\n#' }\n#'\n#'\n#'\n#'\n#'\n#'\n#'\n#'\n\n",
    "created" : 1502336607809.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "239443237",
    "id" : "694BB4DC",
    "lastKnownWriteTime" : 1502416229,
    "last_content_update" : 1502416229,
    "path" : "~/GitHub/gfer/R/plotScatterPie.R",
    "project_path" : "R/plotScatterPie.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}